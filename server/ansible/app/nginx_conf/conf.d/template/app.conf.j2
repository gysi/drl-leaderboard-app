log_format postdata escape=none '$remote_addr - $remote_user [$time_local] '
                       '"$request" $status $bytes_sent '
                       '"$http_referer" "$http_user_agent" "$request_body"';

limit_req_zone $binary_remote_addr zone=imglimit:10m rate=100r/s;

{% if server.hostname_old +%}
server {
    listen 80;
    server_name {{ server.hostname_old }};

    location /.well-known/acme-challenge/ {
        root /var/www/certbot;
    }

    location / {
        return 301 $scheme://{{ server.hostname }}$request_uri;
    }
}

server {
    listen 443 ssl;
    http2 on;
    server_name {{ server.hostname_old }};
    ssl_certificate /etc/letsencrypt/live/{{ server.hostname_old }}/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/{{ server.hostname_old }}/privkey.pem;
    include /etc/letsencrypt/options-ssl-nginx.conf;
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;

    return 301 $scheme://{{ server.hostname }}$request_uri;
}
{% endif %}

server {
    listen 80;
    server_name {{ server.hostname }};

    access_log  /var/log/nginx/http-{{ server.hostname }}.access.log main;
    error_log  /var/log/nginx/http-{{ server.hostname }}.error.log warn;

    location / {
        add_header Link "<https://$host$request_uri>; rel=\"canonical\"";
        return 302 https://$host$request_uri;
        #return 200 'Hello World!';
        #add_header Content-Type text/plain;

        # Docker DNS Resolver, this is needed so that nginx doesn't crash when the upstream is not available
        #resolver 127.0.0.11 valid=30s ipv6=off;
        # This variable is needed so that the resolver actually works
        #set $upstream_web web;
        #proxy_pass http://$upstream_web:5000;
    }

    location /.well-known/acme-challenge/ {
        root /var/www/certbot;
    }
}

server {
    listen 443 ssl;
    http2 on;
    server_name {{ server.hostname }};
    ssl_certificate /etc/letsencrypt/live/{{ server.hostname }}/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/{{ server.hostname }}/privkey.pem;
    include /etc/letsencrypt/options-ssl-nginx.conf;
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;

    access_log  /var/log/nginx/https-{{ server.hostname }}.access.log main;
    error_log  /var/log/nginx/https-{{ server.hostname }}.error.log warn;

    root /www/{{ 'prod' if env == 'prod' else 'staging' }}/leaderboard;

    location ^~ /api {
        #return 302 https://$host$request_uri;
        #return 200 'Hello World!';
        #add_header Content-Type text/plain;

        # Docker DNS Resolver, this is needed so that nginx doesn't crash when the upstream is not available
        resolver 127.0.0.11 valid=30s ipv6=off;
        # This variable is needed so that the resolver actually works
        set $upstream_backend backend;
        proxy_pass http://$upstream_backend:8080;
        proxy_http_version  1.1;
        proxy_set_header Connection "";

        proxy_set_header Host               $host;
        proxy_set_header X-Real-IP          $remote_addr;
        proxy_set_header X-Forwarded-For    $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto  $scheme;
    }

    location ~ (.+)/$ {
        return 301 $scheme://$host$1$is_args$args;
    }

    location / {
        charset utf-8;
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
        try_files $uri $uri/ /index.html;
    }

    location ~* ^/thumbor/(.*(\Q.amazonaws.com/drl-game-dashboard\E|\Q.steamstatic.com\E|\Qdrl-sim-cup.s3.amazonaws.com\E|\Qapi.drlgame.com\E|\Qsteamcdn-a.akamaihd.net\E|\Qdrl-sim-virtual-season.s3.amazonaws.com\E|\Qdrl-game-api.s3.amazonaws.com\E).*)$ {
        limit_req zone=imglimit burst=500 nodelay;
        limit_req_status 429;
        # Docker DNS Resolver, this is needed so that nginx doesn't crash when the upstream is not available
        resolver 127.0.0.11 valid=30s ipv6=off;
        set $upstream_thumbor thumbor;
        rewrite ^ $request_uri;
        rewrite ^/thumbor/(.*) unsafe/$1 break;
        return 400; #if the second rewrite won't match
        proxy_pass http://$upstream_thumbor:8888/$uri;
        proxy_http_version  1.1;
        proxy_set_header Connection "";

        proxy_set_header Host               $host;
        proxy_set_header X-Real-IP          $remote_addr;
        proxy_set_header X-Forwarded-For    $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto  $scheme;
    }

    # CSS and Javascript
    location ~* \.(?:css|js|woff|woff2|svg|png|obj)$ {
        expires 1M;
        access_log off;
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
        add_header Cache-Control "public";
    }

    location /proxy {
        if ( $arg_url = '') {
          return 400 "Missing redirect parameter in request";
        }
        if ( $arg_url ~ (.+)%3A%2F%2F(.+) ){ # fix :// between scheme and destination
          set $arg_url $1://$2;
        }
        if ( $arg_url ~ (.+?)%3A(.*) ){ # fix : between destination and port
          set $arg_url $1:$2;
        }
        if ( $arg_url ~ (.+?)%2F(.*) ){ # fix / after port, the rest will be decoded by proxy_pass
          set $arg_url $1/$2;
        }
        # Only allow proxy pass if $arg_url starts with https://drl-game-dashboard.s3.amazonaws.com
        if ( $arg_url !~ ^https://drl-game-dashboard.s3.amazonaws.com ) {
          return 403 "This proxy only accepts requests to https://drl-game-dashboard.s3.amazonaws.com";
        }

        # Docker DNS Resolver, this is needed so that nginx doesn't crash when the upstream is not available
        resolver 127.0.0.11 valid=30s ipv6=off;

        proxy_pass $arg_url;
    }
}
