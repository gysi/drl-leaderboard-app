---
- name: "Deploy App"
  hosts: all
  user: root

  tasks:
    - name: "SSHD configuration"
      ansible.builtin.blockinfile:
        path: /etc/ssh/sshd_config
        insertbefore: BOF # Beginning of the file
        marker: "# {mark} ANSIBLE MANAGED BLOCK"
        block: |
          PasswordAuthentication no
          PermitRootLogin prohibit-password
          # For failtoban to work correctly set:
          LogLevel VERBOSE
        backup: true
        validate: /usr/sbin/sshd -T -f %s
      notify: Restart SSHD

    - name: "Install UFW"
      ansible.builtin.apt:
        name: ufw
        state: present
        update_cache: true

    - name: "Set UFW default to deny incoming connections"
      community.general.ufw:
        direction: incoming
        policy: deny

    - name: "Allow incoming traffic for SSH"
      community.general.ufw:
        rule: limit
        port: ssh
        proto: tcp

    - name: "Allow incoming traffic for HTTP"
      community.general.ufw:
        rule: allow
        port: '80'
        proto: tcp

    - name: "Allow incoming traffic for HTTPS"
      community.general.ufw:
        rule: allow
        port: '443'
        proto: tcp

    - name: "Enable UFW"
      community.general.ufw:
        state: enabled

    - name: "Add packages necessary for docker to work"
      ansible.builtin.apt:
        name:
          - ca-certificates
          - gnupg
          - curl
        state: present
        update_cache: true

    - name: "Add Docker GPG apt Key"
      ansible.builtin.apt_key:
        url: https://download.docker.com/linux/debian/gpg
        state: present

    - name: "Add Docker to apt Repo"
      ansible.builtin.apt_repository:
        repo: deb [arch=amd64] https://download.docker.com/linux/debian bullseye stable
        state: present

    - name: "Install Docker"
      ansible.builtin.apt:
        name:
          - docker-ce=5:24.*
          - docker-ce-cli=5:24.*
          - containerd.io
          - docker-compose-plugin
        state: present
        update_cache: true

    - name: "Gather the package facts"
      ansible.builtin.package_facts:
        manager: apt

    - name: "Install Jail2Ban"
      ansible.builtin.apt:
        name: fail2ban
        state: present
        update_cache: true

#    TODO install GoAccess and configure it correctly to work with the nginx logs

    - name: "Backup original fail2ban config"
      ansible.builtin.copy:
        src: /etc/fail2ban/jail.conf
        dest: /etc/fail2ban/jail.conf.bak
        remote_src: true
        backup: true
        mode: preserve
      when: "'fail2ban' not in ansible_facts.packages"

    - name: "Synchronize jail2ban folder with remote host"
      ansible.posix.synchronize:
        src: fail2ban/
        dest: /etc/fail2ban/
        archive: false
        recursive: true
        checksum: true
      notify: Restart Fail2Ban

    - name: "Create directories for thumbor with correct permissions"
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        mode: '0777'
      loop:
        - app/data/imgcache
        - app/data/imgcache/result-storage
        - app/data/imgcache/source-storage

    - name: "Synchronize Docker Compose project with remote host"
      ansible.posix.synchronize:
        src: app/
        dest: app
        archive: false
        recursive: true
        delete: true
        checksum: true

    - name: "Apply Jinja2 templating to app/nginx_conf/conf.d/template/app.conf.j2"
      ansible.builtin.template:
        src: app/nginx_conf/conf.d/template/app.conf.j2
        dest: app/nginx_conf/conf.d/app.conf
        mode: '644'

    - name: "Apply Jinja2 templating to app/nginx_conf/conf.d/template/transmitters.conf.j2"
      ansible.builtin.template:
        src: app/nginx_conf/conf.d/template/transmitters.conf.j2
        dest: app/nginx_conf/conf.d/transmitters.conf
        mode: '644'

    - name: "Apply Jinja2 templating to app/template/init-letsencrypt.sh.j2"
      ansible.builtin.template:
        src: app/template/init-letsencrypt.sh.j2
        dest: app/init-letsencrypt.sh
        mode: '744'

    - name: "Check if certificates directory is empty"
      ansible.builtin.find:
        paths: "app/data/certbot/conf/live/{{ server.hostname }}"
        file_type: any
        hidden: true
      register: certdir_leaderboard

    - name: "Check if certificates directory is empty"
      ansible.builtin.find:
        paths: "app/data/certbot/conf/live/{{ server.hostname_transmitters }}"
        file_type: any
        hidden: true
      register: certdir_transmitters

    - name: "Tear down existing services"
      ansible.builtin.command:
        chdir: /root/app
        cmd: docker compose down
      register: result
      changed_when: result.stdout != ""

    - name: "Create certificates"
      ansible.builtin.command: app/init-letsencrypt.sh
      when: certdir_leaderboard.matched == 0 or certdir_transmitters.matched == 0
      changed_when: true

    - name: "Create and start services"
      ansible.builtin.command:
        chdir: /root/app
        cmd: docker compose up --build --remove-orphans -d
      register: result
      changed_when: result.stdout != ""

#    - name: "Docker-compose debug"
#      ansible.builtin.debug:
#        var: output

    - name: "Adds logrotate configuration"
      ansible.posix.synchronize:
        src: logrotate/
        dest: /etc/logrotate.d/
        archive: false
        recursive: true
        checksum: true

    - name: "Adds cron for logrotate"
      ansible.posix.synchronize:
        src: cron/
        dest: /etc/cron.d/nginx/
        archive: false
        recursive: true
        checksum: true
      notify: Restart Cron Service

  handlers:
    - name: "Restart SSHD"
      ansible.builtin.service:
        name: sshd
        state: restarted

    - name: "Restart Fail2Ban"
      ansible.builtin.service:
        name: fail2ban
        state: restarted

    - name: "Restart Cron Service"
      ansible.builtin.service:
        name: cron
        state: restarted
